#!/usr/bin/python

from __future__ import print_function
import sys
import csv
import getopt
import datetime


def print_err(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def print_help_and_exit():
    print_err('Usage: ' + sys.argv[0] + '[options] <input>')
    sys.exit(1)


def main(argv):
    optlist, args = getopt.getopt(argv[1:], 'k:v:o:c:vo', [
        'key=', 'value=', 'output=', 'comment=', "value-override="
    ])

    key = None
    val = None
    valOverride = None
    opath = None
    comment = None

    for opt in optlist:
        if opt[0] == '-k' or opt[0] == '--key':
            key = opt[1]
        elif opt[0] == '-v' or opt[0] == '--value':
            val = opt[1]
        elif opt[0] == '-o' or opt[0] == '--output':
            opath = opt[1]
        elif opt[0] == '-c' or opt[0] == '--comment':
            comment = opt[1]
        elif opt[0] == '-vo' or opt[0] == '--value-override':
            valOverride = opt[1]

    if key is None:
        print_err('ERROR: missing column name for "key"')
        print_help_and_exit()

    if val is None:
        print_err('ERROR: missing column name for "value"')
        print_help_and_exit()

    if len(args) < 1:
        print_err('ERROR: missing argument: <input>')
        print_help_and_exit()

    filepath = args[0]

    with ((opath is not None and open(opath, 'w')) or sys.stdout) as out:
        try:
            with open(filepath) as csvfile:
                print('<!-- AUTO-GENERATED BY', __file__ or argv[0], ' -->', file=out)
                print('<!-- GENERATED ON:', datetime.datetime.now(), ' -->', file=out)
                print('<!-- DO NOT MODIFY!!! -->', file=out)
                print('<resources>', file=out)

                reader = csv.DictReader(csvfile)
                for row in reader:
                    k = row[key].replace('\n', '\\n').replace('"', '\\"')
                    v = row[valOverride] if row[valOverride] != "" else row[val]
                    v = v.replace('\n', '\\n').replace('"', '\\"')

                    if comment is not None:
                        c = row[comment].replace('\n', '\\n').replace('"', '\\"')
                        if len(c) > 0:
                            print('// {}'.format(c))

                    if len(k) <= 0:
                        print_err('{}:{}: warning: column "{}" is empty'.format(filepath, reader.line_num, key))
                    else:
                        print('<string name="{}">"{}"</string>'.format(k.lower(), v), file=out)

                    if len(v) <= 0:
                        print_err('{}:{}: warning: column "{}" is empty'.format(filepath, reader.line_num, val))

                print('</resources>', file=out)
        except IOError as e:
            print_err('could not read file: "{}"'.format(filepath))


if __name__ == "__main__":
    main(sys.argv)
